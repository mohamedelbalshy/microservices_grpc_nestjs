version: "3"

services:
  gateway-svc:
    container_name: gateway
    image: gateway:latest
    build:
      context: "./gateway"
      dockerfile: "./Dockerfile"
    ports:
      - "3000:3000"
    networks:
      - backend
    volumes:
      - ./gateway:/usr/src/app
      - ./_proto:/usr/src/app/_proto
    command: npm run start:dev
    environment:
        NODE_ENV: "dev"
        PORT: "3000"
        USERS_SVC_URL: "users-svc"
        USERS_SVC_PORT: "50051"
        POSTS_SVC_URL: "posts-svc"
        POSTS_SVC_PORT: "50051"
        GRPC_DNS_RESOLVER: native
        COMMENTS_SVC_URL: "comments-svc"
        COMMENTS_SVC_PORT: "50051"
        REDIS_HOST: cache
        REDIS_PORT: 6379
        REDIS_PASSWORD: eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81

    restart: "on-failure"
    depends_on:
      - "users-svc"
      - "posts-svc"
      - "comments-svc"
      
  db:
    container_name: db
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - '5432'
    volumes: 
      - new_db_volume:/var/lib/postgresql/data  
    networks:
    - backend

  users-svc:
    container_name: users
    image: users:latest
    build:
      context: "./microservices/users"
      dockerfile: "./Dockerfile"
    expose:
      - "50051"
    networks:
      - backend
    command: npm run start:dev
    volumes:
      - ./microservices/users:/usr/src/app
      - ./_proto:/usr/src/app/_proto
    environment:
        NODE_ENV: "dev"
        PORT: "50051"
        USERS_SVC_URL: "users-svc"
        USERS_SVC_PORT: "50051"
        GRPC_DNS_RESOLVER: native
        JWT_SECRET: asdjhdsfkjhsdkjfh
        JWT_REFRESH_SECRET: asjdhaksjhdjakhsdj
        JWT_EXPIRES_IN: 7d
    restart: "on-failure"
    depends_on:
      - "db"
   
  
  posts-svc:
    container_name: posts
    image: posts:latest
    build:
      context: "./microservices/posts"
      dockerfile: "./Dockerfile"
    expose:
      - "50051"
    networks:
      - backend
    command: npm run start:dev
    volumes:
      - ./microservices/posts:/usr/src/app
      - ./_proto:/usr/src/app/_proto
    environment:
        NODE_ENV: "dev"
        PORT: "50051"
        POSTS_SVC_URL: "posts-svc"
        POSTS_SVC_PORT: "50051"
        GRPC_DNS_RESOLVER: native
        REDIS_HOST: cache
        REDIS_PORT: 6379
        REDIS_PASSWORD: eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
    restart: "on-failure"
    depends_on:
      - "db"
   

  comments-svc:
    container_name: comments
    image: comments:latest
    build:
      context: "./microservices/comments"
      dockerfile: "./Dockerfile"
    expose:
      - "50051"
    networks:
      - backend
    command: npm run start:dev
    volumes:
      - ./microservices/comments:/usr/src/app
      - ./_proto:/usr/src/app/_proto
    environment:
        NODE_ENV: "dev"
        PORT: "50051"
        COMMENTS_SVC_URL: "comments-svc"
        COMMENTS_SVC_PORT: "50051"
        GRPC_DNS_RESOLVER: native
        
    restart: "on-failure"
    depends_on:
      - "db"

  rabbitmq-svc:
    image: rabbitmq:3.8-management-alpine
    container_name: 'rabbitmq'
    ports:
        - 5673:5672
        - 15673:15672
    volumes:
        - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
        - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    networks:
        - backend

  cache:
    container_name: cache
    image: redis:6.2-alpine
    restart: always
    ports:
      - '6378:6379'
    command: redis-server --save 20 1 --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
    volumes: 
      - cache:/data

  # pgadmin:
  #   image: dpage/pgadmin4
  #   container_name: pgadmin4_container
  #   restart: always
  #   ports:
  #     - "5050:80"
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: raj@nola.com
  #     PGADMIN_DEFAULT_PASSWORD: admin
  #   volumes:
  #     - pgadmin-data:/var/lib/pgadmin
networks:
  backend:
    driver: bridge
volumes:
  new_db_volume:
    driver: local
  cache:
    driver: local  
  pgadmin-data:
    driver: local
  